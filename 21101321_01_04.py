# -*- coding: utf-8 -*-
"""422_final_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c-6_U3C8EST64wCvmSO5C27w16otlrbm
"""

# Name = Naveya Novely Datta
# ID: 21101321
# Section: 04

from queue import PriorityQueue

sample = open("/content/Input_file.txt")

new_list = []
new_list = sample.readlines()
#print(new_list)
list_2 = []
for i in new_list:
  list_2.append(i.split(" "))
#print(list_2)

#dict_heu = {}

for i in list_2:
  dict_heu[i[0]] = int(i[1])
print(dict_heu)

dict_graph = {}

for i in list_2:
  dict_graph[i[0]] = []

child = []

for i in list_2:
  parent = i[0]
  for j in range(2,len(i)-1,2):
    child = [i[j]]
    path_cost = int(i[j+1])
    child.append(path_cost)
    #print(child)
    dict_graph[parent].append(child)

#print(dict_graph)

queue = PriorityQueue()
visited=[]

def a_star(dict_graph, dict_heu, start, goal):

  visited.append(start)
  packet = []
  packet.append(dict_heu[start])
  packet.append(start)
  queue.put(packet)

  route = []

  while queue.empty()==False:
    root= queue.get()
    state=root[1]
    route.append(state)

    for children in dict_graph[state]:

      if children[0] not in visited:
        visited.append(children[0])
        func = children[1] + dict_heu[children[0]]
        packet_2 = []
        packet_2.append(func)
        packet_2.append(children[0])
        queue.put(packet_2)

      if children[0] == goal:
        route.append(children[0])
        return route

optimal_path = a_star(dict_graph, dict_heu, "Arad", "Bucharest")

sum = 0

for k in range(len(optimal_path)-1):
  track = dict_graph[optimal_path[k]]

  for child in track:
    if optimal_path[k+1] in child:
      sum += child[1]

#print(optimal_path)

for i in optimal_path:
  print(i+"->",end="")
print()
print("Total distance:"+" "+str(sum)+" "+"km")

