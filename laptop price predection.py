# -*- coding: utf-8 -*-
"""rough_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1imGimcJso8OgHT63afR7lpG8kDOoOvRP
"""

import pandas as pd

import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score

import seaborn as sns

data=pd.read_csv("/content/laptop_price.csv", encoding = "latin-1")
data.head()

data.shape

data.info()

data.isnull().sum()

data.duplicated().any()

data["Ram"] = data["Ram"].str[:-2]
data["Ram"] = data["Ram"].astype("float")

data.head(3)

class_counts = data['Company'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

values_to_drop = ['Chuwi','Google','Fujitsu','LG','Huawei']

mask = data['Company'].isin(values_to_drop)

data.drop(data[mask].index, inplace=True)

class_counts = data['Company'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

class_counts = data['TypeName'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

class_counts = data['OpSys'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

values_to_drop = ['Android', 'Windows 10 S', 'Mac OS X']

mask = data['OpSys'].isin(values_to_drop)

data.drop(data[mask].index, inplace=True)

class_counts = data['OpSys'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

class_counts = data['Ram'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

values_to_drop = [24, 64]

mask = data['Ram'].isin(values_to_drop)

data.drop(data[mask].index, inplace=True)

class_counts = data['Ram'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

data = data.drop("laptop_ID",axis=1)
data = data.drop("Product",axis=1)
data = data.drop("Inches",axis=1)

data

class_counts = data['Cpu'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

class_counts = data['Gpu'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

data["GPU"] = data.Gpu.str.split(" ").apply(lambda x: x[0])

class_counts = data['GPU'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

values_to_drop = ['ARM']

mask = data['GPU'].isin(values_to_drop)
data.drop(data[mask].index, inplace=True)

class_counts = data['GPU'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

data["CPU"] = data.Cpu.str.split(" ").apply(lambda x: x[0])

class_counts = data['CPU'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

values_to_drop = ['Samsung']

mask = data['CPU'].isin(values_to_drop)
data.drop(data[mask].index, inplace=True)

class_counts = data['CPU'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

data["CPU_Frequency"] = data.Cpu.str.split(" ").apply(lambda x: x[-1])
data["CPU_Frequency"] = data["CPU_Frequency"].str[:-3]
data["CPU_Frequency"] = data["CPU_Frequency"].astype("float")

class_counts = data['CPU_Frequency'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.xticks(rotation='vertical')
plt.title('Frequency')
plt.xlabel('Class')

data.head(3)

"""Pre-processing"""

data = data.drop("Cpu",axis=1)
data = data.drop("Gpu",axis=1)

data.head(3)

data.shape

data["ScreenResolution"] = data["ScreenResolution"].str.split(" ")
data["ScreenResolution"] = data["ScreenResolution"].apply(lambda x: x[-1])
data["ScreenWidth"] = data["ScreenResolution"].str.split("x").apply(lambda x: int(x[0]))
data["ScreenHeight"] = data["ScreenResolution"].str.split("x").apply(lambda x: int(x[1]))

data.head(3)

data.info()

data.drop("ScreenResolution", axis=1, inplace=True)

data.head(3)

data["Weight"] = data["Weight"].str[:-2]
data["Weight"] = data["Weight"].astype("float")

def convert_memory(value):
  if "GB" in value:
    return float(value[:value.find("GB")])
  elif "TB" in value:
    return float(value[:value.find("TB")])*1000

data["MemoryAmount"] = data.Memory.str.split(" ").apply(lambda x: x[0])
data["MemoryType"] = data.Memory.str.split(" ").apply(lambda x: x[1])

data["MemoryAmount"] = data["MemoryAmount"].apply(convert_memory)

data.drop("Memory", axis=1, inplace=True)

data.head(3)

ctg_enc = pd.get_dummies(data['Company'])
ctg_enc = ctg_enc.astype(int)
data = pd.concat([data, ctg_enc], axis=1)
data = data.drop('Company', axis=1)

ctg_enc = pd.get_dummies(data['TypeName'])
ctg_enc = ctg_enc.astype(int)
data = pd.concat([data, ctg_enc], axis=1)
data = data.drop('TypeName', axis=1)

ctg_enc = pd.get_dummies(data['OpSys'])
ctg_enc = ctg_enc.astype(int)
data = pd.concat([data, ctg_enc], axis=1)
data = data.drop('OpSys', axis=1)

ctg_enc = pd.get_dummies(data['GPU'])
ctg_enc = ctg_enc.astype(int)
data = pd.concat([data, ctg_enc], axis=1)
data = data.drop('GPU', axis=1)

ctg_enc = pd.get_dummies(data['MemoryType'])
ctg_enc = ctg_enc.astype(int)
data = pd.concat([data, ctg_enc], axis=1)
data = data.drop('MemoryType', axis=1)

ctg_enc = pd.get_dummies(data['CPU'])
ctg_enc = ctg_enc.astype(int)
data = pd.concat([data, ctg_enc], axis=1)
data = data.drop('CPU', axis=1)

data.head(3)

data_corr = data.corr()
data_corr

sns.heatmap(data_corr, cmap = 'YlGnBu')

target_corr = data.corr()["Price_euros"].sort_values()
target_corr

"""Train-test"""

X=data.drop('Price_euros',axis=1)

X.shape

Y=data['Price_euros']

Y.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state=50)

X_train.shape

y_train

y_train.shape

y_test.shape

"""Scaling"""

from sklearn.preprocessing import StandardScaler
std=StandardScaler()

X_train_std = std.fit_transform(X_train)
X_test_std = std.transform(X_test)

X_train_std

X_train_std.shape

y_train

y_train.shape

"""Training modles.

Decission Tree
"""

from sklearn.tree import DecisionTreeRegressor
dt = DecisionTreeRegressor()

dt.fit(X_train_std,y_train)

predictions_1 = dt.predict(X_test_std)

from sklearn.metrics import r2_score
r2_1 = r2_score(y_test, predictions_1)
r2_1

"""Linear Regression"""

from sklearn.linear_model import LinearRegression
lr = LinearRegression()

lr.fit(X_train_std, y_train)

predictions_2 = lr.predict(X_test_std)

from sklearn.metrics import r2_score
r2_2 = r2_score(y_test, predictions_2)
r2_2

"""Random forest"""

from sklearn.ensemble import RandomForestRegressor
lg = RandomForestRegressor()

lg.fit(X_train_std, y_train)

predictions_3 = lg.predict(X_test_std)

from sklearn.metrics import r2_score
r2_3 = r2_score(y_test, predictions_3)
r2_3

import matplotlib.pyplot as plt

r2_scores = [r2_1, r2_2, r2_3]

models = ['dt', 'lr', 'lg']

plt.figure(figsize=(8, 4))
plt.bar(models, r2_scores)
plt.xlabel("Algorithms")
plt.ylabel("Accuracy Score(R-squared)")

plt.yticks([i/10 for i in range(10)])

plt.show()

"""Scatter Plot

Decission Tree
"""

plt.figure(figsize=(10,6))
plt.scatter(predictions_1, y_test)
plt.plot(range(0, 5000), range(0, 5000), c="red")

"""Linear Regression"""

plt.figure(figsize=(10,6))
plt.scatter(predictions_2, y_test)
plt.plot(range(0, 5000), range(0, 5000), c="red")

"""Random Forest"""

plt.figure(figsize=(10,6))
plt.scatter(predictions_3, y_test)
plt.plot(range(0, 5000), range(0, 5000), c="red")