# -*- coding: utf-8 -*-
"""422_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KZ5oZPPUke519VxxSIBRIlFIWWSS73XO
"""

import random
sample = open("/content/input_2.txt")

x = sample.readline()
y = x.split(" ")
#print(y)
players = int(y[0])
total_run = int(y[1])

# print(players)
# print(total_run)

palyer_run = []
for i in range(players):
  a = sample.readline()
  b = a.split(" ")
  c = palyer_run.append([b[0],int(b[1])])
#print(palyer_run)

player_name = []
for i in palyer_run:
  player_name.append(i[0])
print(player_name)

########generating random solutions#########################

no_of_chronosomes = 4
solutions = []
for i in range(no_of_chronosomes):
  chromosome = ''
  for j in range(players):
    r = random.randint(0,1)
    chromosome += str(r)
  solutions.append(chromosome)
#print(solutions)

############fitness function#################################

def fitness_func(solutions):
  fitness = []
  for i in solutions:
    #print(i)
    sum = 0
    for j in range(len(i)):
      if int(i[j])== 1:
        run = palyer_run[j][1]
        sum += run
    difference = total_run-sum
    fitness.append(abs(difference))
  return fitness

# fitness_check = fitness_func(solutions)
# print(fitness_check)

###########selection################
def selection(solutions,fitness_check):
  for i in range(len(solutions)):
    sort_score = sorted(fitness_check)
    sort_score = sort_score[:-1] #############eliminating the least fit ######
    parent = []
    for i in sort_score:
      parent_index = fitness_check.index(i)
      parent.append(solutions[parent_index])
  return parent

# list_of_fit_parents = selection(solutions,fitness_check)
# print(list_of_fit_parents)

def crossover(parent):
  #offspring_list=[]
  parent_list = list_of_fit_parents
  #print(parent_list)
  random_chromosome = random.randint(0,2)
  to_be_corssed_with = []
  for i in parent_list:
    if i == parent_list[random_chromosome]:
      #print(parent_list[random_chromosome])
      pass
    else:
      to_be_corssed_with.append(i)
  #print(to_be_corssed_with)

  crossover_at = random.randint(0, players-1)
  #print(crossover_at)
  offspring_1 = parent_list[random_chromosome][:crossover_at] + to_be_corssed_with[0][crossover_at:]
  offspring_2 = to_be_corssed_with[0][:crossover_at] + parent_list[random_chromosome][crossover_at:]
  offspring_3 = parent_list[random_chromosome][:crossover_at] + to_be_corssed_with[-1][crossover_at:]
  offspring_4 = to_be_corssed_with[-1][:crossover_at] + parent_list[random_chromosome][crossover_at:]
  offspring_list = [offspring_1,offspring_2,offspring_3,offspring_4]
  return offspring_list

# chromosomes_after_crossover = crossover(list_of_fit_parents)
# print(chromosomes_after_crossover)

def mutation(chromosome):
  mutation_at = random.randint(0, players-1)
  if chromosome[mutation_at] =='0':
    mutated_chromosome = chromosome[:mutation_at]+'1'+chromosome[mutation_at+1:]
  else:
    mutated_chromosome = chromosome[:mutation_at]+'0'+chromosome[mutation_at+1:]
  return mutated_chromosome

# check_mutation = mutation('11110101')
# print(check_mutation)

################the algorithm################################

for i in range(100):

  fitness_check = fitness_func(solutions)
  if 0 in fitness_check:
    index1 = fitness_check.index(0)
    fittest_chromosome = solutions[index1]
    #print(fittest_chromosome)
    break

  else:
    list_of_fit_parents = selection(solutions,fitness_check)
    #print(list_of_fit_parents)

    chromosomes_after_crossover = crossover(list_of_fit_parents)
    #print(chromosomes_after_crossover)
    after_mutation = []
    for i in chromosomes_after_crossover:
      new_offspring = mutation(i)
      after_mutation.append(new_offspring)
    #print(after_mutation)

    solutions = chromosomes_after_crossover

print(fittest_chromosome)